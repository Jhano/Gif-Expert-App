{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","Form","onSubmit","e","preventDefault","trim","length","category","InputGroup","className","Prepend","Text","FormControl","placeholder","aria-label","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","Card","Img","variant","src","Body","Title","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Spinner","animation","role","CardColumns","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sOA+CeA,EAxCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAmBrC,OACI,cAACC,EAAA,EAAD,CAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAGCL,EAAWM,OAAOC,OAAS,IAC1BT,GAAc,SAAAU,GAAQ,OAAKR,GAAL,mBAAoBQ,OAC1CP,EAAc,MAKlB,SACI,eAACQ,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACI,cAACD,EAAA,EAAWE,QAAZ,UACI,cAACF,EAAA,EAAWG,KAAZ,UAAiB,cAAC,IAAD,QAErB,cAACC,EAAA,EAAD,CACIC,YAAY,MACZC,aAAW,aACXC,MAAOhB,EACPiB,SAzBK,SAACb,GAClBH,EAAcG,EAAEc,OAAOF,gB,yDCZlBG,EAAO,uCAAG,WAAMX,GAAN,uBAAAY,EAAA,6DACbC,EADa,iDACmCC,UAAUd,GAD7C,8DAEAe,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAIFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAcZM,GAdY,4CAAH,sD,QCgBLO,EAZK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACA,eAACc,EAAA,EAAD,CAAMzB,UAAU,0CAAhB,UACQ,cAACyB,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAOC,IAAKjB,IAClC,cAACc,EAAA,EAAKI,KAAN,UACI,cAACJ,EAAA,EAAKK,MAAN,UAAaT,UC6BVU,EA/BE,SAAC,GAAgB,IAAfjC,EAAc,EAAdA,SAAc,ECLL,SAACA,GAAc,IAAD,EAEZT,mBAAS,CAC/B2B,KAAM,GACNgB,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACN1B,EAAQX,GAAUsC,MAAK,SAAAC,GACnBH,EAAS,CACLlB,KAAMqB,EACNL,SAAS,SAGlB,CAAClC,IAEGmC,EDVyBK,CAAaxC,GAAhCwB,EADgB,EACtBN,KAAcgB,EADQ,EACRA,QAErB,OACI,qCACI,oBAAIhC,UAAU,0CAAd,SAAyDF,IAErDkC,EAAU,qCACE,cAACO,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WACjC,sBAAMzC,UAAU,mCAAhB,6BAEF,cAAC0C,EAAA,EAAD,CAAa1C,UAAU,8CAAvB,SAEUsB,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEMtCuB,EAvBM,WAAO,IAAD,EAEatD,mBAAS,CAAC,cAFvB,mBAEhBuD,EAFgB,KAEJxD,EAFI,KAIvB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACKwD,EAAW1B,KAAI,SAAApB,GAAQ,OACnB,cAAC,EAAD,CAEGA,SAAUA,GADLA,UCNd+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f14a1ba6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {InputGroup, FormControl, Form} from 'react-bootstrap'\r\nimport {Search} from 'react-bootstrap-icons';\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value);   \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        //trim() corta los espacios en blanco\r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories(category => [inputValue, ...category ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text><Search/></InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    placeholder=\"Gif\"\r\n                    aria-label=\"Buscar gif\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}    \r\n                />\r\n            </InputGroup>  \r\n        </Form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired, // hago que el prop sea requerida si o si\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=z9JwafcQm6LVmqJ6mJGev2p36iMPMxG3`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react';\r\nimport {Card} from 'react-bootstrap';\r\nimport '../index.css';\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n    <Card className=\"card animate__animated animate__fadeIn \">\r\n            <Card.Img variant=\"top\"  src={url} />\r\n        <Card.Body>\r\n            <Card.Title>{title}</Card.Title>\r\n        </Card.Body>\r\n    </Card>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport {CardColumns, Spinner} from 'react-bootstrap';\r\nimport '../index.css';\r\n\r\n\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid =  ({category}) => {  \r\n    const {data: images, loading} = useFetchGifs(category);  \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"title animate__animated animate__bounce\">{category}</h3>\r\n            {\r\n                loading ? <>\r\n                            <Spinner animation=\"border\" role=\"status\"/>\r\n                            <span className=\"animate__animated animate__flash\"> Cargando...</span>\r\n                          </>\r\n                        : <CardColumns className=\"card-grid animate__animated animate__fadeIn\">    \r\n                                {\r\n                                    images.map((img) => (\r\n                                        <GifGridItem \r\n                                            key={img.id}\r\n                                            {...img}\r\n                                        />\r\n                                    ))\r\n                                } \r\n                            </CardColumns>  \r\n                        \r\n            }\r\n               \r\n            \r\n        </>\r\n       \r\n    )\r\n       \r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            })\r\n        });\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One piece']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n                {categories.map(category => (\r\n                     <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                    />\r\n                ))}\r\n             \r\n           \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}